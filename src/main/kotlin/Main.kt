/*Необходимо составить программу, которая помогает пользователю составить план поезда.
После запуска программа спрашивает пользователя - хочет ли он закончить работу, или составить поезд.

Есть 4 основных шага в создании плана:
-Создать направление - создает направление для поезда (к примеру Бийск - Барнаул).
Маршрут составляется случайным выбором двух городов из списка, состоящего, минимум, из 15-и городов. Начальная и конечная точки маршрута должны быть различны.
-Продать билеты - вы получаете рандомное кол-во пассажиров, которые купили билеты на это направление.
Количество пассажиров находится в диапазоне от 5-и до 201
-Сформировать поезд - вы создаете поезд и добавляете ему столько вагонов(вместительность каждого вагона определяется рандомно и находится в
диапазоне от 5 до 25), сколько хватит для перевозки всех пассажиров.
То есть вы прибавляете к поезду по одному вагону рандомной вместительности до тех пор, пока не усадите в них всех пассажиров, купивших билеты
-Отправить поезд - вы отправляете поезд, после чего можете снова создать направление.
Программа выдает запрос на окончание или продолжение работы. То есть программа работает до тех пор, пока пользователь не введет слово EXIT.

После каждого этапа выдается соответствующая информация. После 4-го шага программа сообщает, что поезд [направление],
состоящий из [количество] вагонов отправлен. Также выдается информация о вместимости каждого вагона и количестве пассажиров в каждом вагоне.

Программа не должна "падать" при вводе неправильных значений*/

import kotlin.random.Random

fun main() {
    var working = true

    while (working) {
        print("│ Хотите составить поезд/завершить работу? Введите 'поезд' или 'ВЫХОД': ")
        val choice = readLine()?.lowercase()

        if (choice == "выход") {
            working = false
            println("│ Работа завершена.")
        } else if (choice == "поезд") createTrain()
        else println("│ Неверный ввод")
    }
}

fun createTrain() {
    val cities = listOf("Москва","Санкт Петербург","Новосибирск","Екатеринбург","Челябинск","Красноярск","Пермь","Тюмень","Владивосток","Хабаровск","Самара")

    val startCity = cities.random()
    var endCity = cities.random()
    while(endCity == startCity){
        endCity = cities.random()
    }
    val route = "$startCity - $endCity"
    println("▰▱▰▱▰ Создано направление: $route ▰▱▰▱▰")

    val bilets = Random.nextInt(5, 201)
    println("│ Продано $bilets билетов")

    val wagons = mutableListOf<Wagon>()
    var passengers = 0
    while (passengers < bilets) {
        val capacity = Random.nextInt(5, 25)
        val Wagon = Wagon(capacity)
        wagons.add(Wagon)
        passengers += capacity
    }
    println("│ Сформирован поезд из ${wagons.size} вагонов")

    val train = Train(route, wagons)
    train.send()
}